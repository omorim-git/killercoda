apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-static
  namespace: latency-demo
data:
  index.html: |
    <!doctype html>
    <html lang="ja">
    <head>
      <meta charset="utf-8" />
      <meta name="viewport" content="width=device-width, initial-scale=1" />
      <title>Latency Demo</title>
      <style>
        body { font-family: system-ui, sans-serif; max-width: 900px; margin: 24px auto; }
        h1 { margin-bottom: .25rem; }
        .desc { color: #555; margin-bottom: 1rem; }
        button { padding: .6rem 1rem; margin-right: .5rem; cursor: pointer; }
        table { width: 100%; border-collapse: collapse; margin-top: 1rem; }
        th, td { border: 1px solid #ddd; padding: .5rem; font-variant-numeric: tabular-nums; }
        th { background: #fafafa; text-align: left; }
        .ok { color: #0a7; }
        .warn { color: #d70; }
      </style>
    </head>
    <body>
      <h1>Webアクセスレイテンシデモ</h1>
      <div class="desc">
        接続ルート: ユーザ(このページ) → 中継サーバ → Webアプリ。<br/>
        「リクエスト」ボタンを押すたびに、各サーバ処理時間と推定ネットワーク時間、合計往復時間を記録・追記します。
      </div>

      <div>
        <button id="btn-normal">リクエスト</button>
        <span id="status"></span>
      </div>

      <table>
        <thead>
          <tr>
            <th>#</th>
            <th>リクエスト時刻</th>
            <th>中継サーバ(ms)</th>
            <th>Webアプリ(ms)</th>
            <th>ネットワーク推定(ms)</th>
            <th>合計往復(ms)</th>
          </tr>
        </thead>
        <tbody id="log"></tbody>
      </table>

      <script>
        const logBody = document.getElementById('log');
        const status = document.getElementById('status');
        let counter = 0;

        function addRow(d) {
          const tr = document.createElement('tr');
          tr.innerHTML = `
            <td>${++counter}</td>
            <td>${d.request_timestamp}</td>
            <td>${d.relay_time_ms}</td>
            <td>${d.backend_time_ms}</td>
            <td>${d.network_time_ms}</td>
            <td ${d.total_elapsed_ms > 500 ? 'class="warn"' : 'class="ok"'}>${d.total_elapsed_ms}</td>
          `;
          logBody.prepend(tr);
        }

        async function sendNormal() {
          try {
            status.textContent = '送信中…';
            const start = performance.now();
            const body = JSON.stringify({ type: 'normal', message: 'hello' });
            const res = await fetch('/api/request', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body
            });
            const json = await res.json();

            const clientTotal = Math.round(performance.now() - start);

            // ヘッダ優先（応答直前までのサーバ合計をカバー）
            const hdr = res.headers.get('X-Server-Total-MS');
            let serverTotal = Number.isFinite(Number(hdr)) ? parseInt(hdr, 10) : NaN;
            if (!Number.isFinite(serverTotal)) {
              // 互換: ボディの server_total_ms → なければ中継CPU+バックエンド内部
              serverTotal = (typeof json.server_total_ms === 'number')
                ? json.server_total_ms
                : ((json.relay_time_ms || 0) + (json.backend_time_ms || 0));
            }

            const netEst = Math.max(clientTotal - serverTotal, 0);

            json.total_elapsed_ms = clientTotal;
            json.network_time_ms = netEst;

            addRow(json);
          } catch (e) {
            console.error(e);
            alert('リクエストに失敗しました');
          } finally {
            status.textContent = '';
          }
        }

        document.getElementById('btn-normal').addEventListener('click', sendNormal);
      </script>
    </body>
    </html>
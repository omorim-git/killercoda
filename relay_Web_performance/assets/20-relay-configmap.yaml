apiVersion: v1
kind: ConfigMap
metadata:
  name: relay-code
  namespace: latency-demo
data:
  relay.py: |
    import os
    import time
    import json
    import hashlib
    from flask import Flask, request, jsonify, make_response
    import requests

    BACKEND_URL = os.environ.get("BACKEND_URL", "http://backend-svc:5000")
    app = Flask(__name__)
    app.config["JSON_AS_ASCII"] = False

    def cpu_check(work_units: int):
        x = 0
        for _ in range(work_units):
            x = (x * 2654435761 + 1) % 2**32
            hashlib.sha256(str(x).encode()).hexdigest()
        return x

    def cors(resp):
        resp.headers["Access-Control-Allow-Origin"] = "*"
        resp.headers["Access-Control-Allow-Headers"] = "*"
        resp.headers["Access-Control-Allow-Methods"] = "GET,POST,OPTIONS"
        return resp

    @app.after_request
    def add_cors(resp):
        return cors(resp)

    @app.route("/", methods=["GET"])
    def serve_frontend():
        r = requests.get("http://frontend-svc/", timeout=10)
        resp = make_response(r.content, r.status_code)  # bytes透過
        ct = r.headers.get("Content-Type", "text/html; charset=utf-8")
        if "charset=" not in ct.lower() and ct.lower().startswith("text/html"):
            ct = "text/html; charset=utf-8"
        resp.headers["Content-Type"] = ct
        for k, v in r.headers.items():
            if k.lower() in ("cache-control",):
                resp.headers[k] = v
        return resp

    @app.route("/favicon.ico")
    def favicon():
        return make_response("", 204)

    @app.route("/api/ping")
    def ping():
        return jsonify({"ok": True})

    @app.route("/api/request", methods=["POST", "OPTIONS"])
    def handle_json():
        if request.method == "OPTIONS":
            return make_response("", 204)

        req_json = request.get_json(force=True, silent=True) or {}
        content = req_json.get("message", "")
        t0 = time.time()

        # 通常リクエストのCPU負荷
        work_units = 80_000
        r0 = time.time()
        cpu_check(work_units)
        r1 = time.time()

        payload = {
            "request_timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
            "request_info": f"len={len(content)}",
        }
        b0 = time.time()
        br = requests.post(f"{BACKEND_URL}/process", json=payload, timeout=60)
        br.raise_for_status()
        b1 = time.time()
        backend = br.json()

        t1 = time.time()
        relay_ms = round((r1 - r0) * 1000)
        backend_ms = backend.get("backend_time_ms", round((b1 - b0) * 1000))
        total_ms = round((t1 - t0) * 1000)
        net_ms = max(total_ms - relay_ms - backend_ms, 0)

        return jsonify({
            "request_timestamp": payload["request_timestamp"],
            "relay_time_ms": relay_ms,
            "backend_time_ms": backend_ms,
            "network_time_ms": net_ms,
            "total_elapsed_ms": total_ms
        })

    if __name__ == "__main__":
        app.run(host="0.0.0.0", port=8080, threaded=True)

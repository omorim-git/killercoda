apiVersion: apps/v1
kind: Deployment
metadata:
  name: cs
  namespace: latency-demo
spec:
  replicas: 2
  selector: { matchLabels: { app: cs } }
  template:
    metadata: { labels: { app: cs } }
    spec:
      nodeSelector: { kubernetes.io/hostname: node01 }
      containers:
        - name: cscontainer
          image: python:3.11-slim
          resources:
            requests: { cpu: "100m" }
            limits:   { cpu: "300m" }   # CPU%を上げ過ぎない
          env:
            - name: CS_THREADS
              value: "12000"           # まずは 8k〜12k。PIDはほぼ増えない
            - name: SLEEP_US
              value: "100"             # 100µs。CPUが上がるなら 200〜1000 へ
            - name: AFFINITY
              value: ""                # 必要なら "0" などでコア固定
          command: ["/bin/sh","-lc"]
          args:
            - |
              python - <<'PY'
              import os, threading, time
              # 任意: コア固定
              aff = os.getenv("AFFINITY","").strip()
              if aff:
                  try:
                      os.sched_setaffinity(0, {int(aff)})
                  except Exception as e:
                      print("affinity failed:", e)
              n = int(os.getenv("CS_THREADS","12000"))
              sleep_us = int(os.getenv("SLEEP_US","100"))
              sleep_s = sleep_us/1_000_000.0
              print(f"Starting {n} sleepers with {sleep_us}us sleeps")
              def sleeper():
                  while True:
                      time.sleep(sleep_s)
              for _ in range(n):
                  threading.Thread(target=sleeper, daemon=True).start()
              # 生存
              threading.Event().wait()
              PY